Team Name JTY
Team Members Tyler Reilly, Yixun Quan, Jakob Woods Weber
Webpage httpsgithub.comTreilly1999CS460W-Capstone
Team Lead Tyler Reilly
Recorder Jakob Woods Weber


Emergency Room Patient Info App Software Requirements Specification


1 Introduction
1.1 Purpose
The purpose of this document is to establish software requirement specifications for the Emergency Room Patient Info App being developed by team JTY for St. Francis Hospital. This application will be used to manage patient information in a hospital emergency room.  


1.2 Scope
The Emergency Room Patient Info App will have a user friendly graphical interface. It will support authentication for different members of hospital staff including registration staff, physicians, nurses, and billing staff and will support appropriate data entry and lookup for all of these staff members. Data will be saved to a database. The goal of this software is to enable hospital staff to quickly, easily, and securely store or retrieve patient information for use in day to day operations.


1.3 Definitions
CRUD - Short for “Create, Read, Update, and Delete.” These are the four fundamental functions of persistent storage.


Health Insurance Portability and Accountability Act (HIPAA) - A United States law outlining standards for information security with relation to patient medical information.

Hospital staff - Hospital staff is assumed to consist of four groups doctors, nurses, registration staff, and billing staff. 


Protected Health Information (PHI) - Any information about patient health status, health care, or payment for health care that can be linked to a specific individual through one or more identifiers. The 18 identifiers are name, geographical identifiers, dates related to the individual, phone numbers, fax numbers, email addresses, Social Security numbers, medical record numbers, health insurance beneficiary numbers, account numbers, certificatelicense numbers, vehicle identifiers, device identifiers, web uniform resource locators, internet protocol address numbers, biometric identifiers, full face photographic images, and any other unique identifying number or characteristic.

SHA-256 - A cryptographic hashing function designed by the National Security Agency. Commonly used to secure passwords.

1.4 References
The Health Insurance Portability and Accountability Act - httpswww.govinfo.govcontentpkgPLAW-104publ191htmlPLAW-104publ191.htm


1.5 Overview 
The remainder of this document contains the following sections
	2 General Description
		2.1 Product Perspective
		2.2 Product Functions
		2.3 User Characteristics
		2.4 General Constraints
		2.5 Assumptions and Dependencies
	3 Specific Requirements
		3.1 Functional Requirements
		3.2 External Interface Requirements
			3.2.1 User Interfaces
			3.2.2 Hardware Interfaces
			3.2.3 Software Interfaces
			3.2.4 Communications Interfaces
		3.3 Performance Requirements
		3.4 Design Constraints
			3.4.1 Standards Compliance
			3.4.2 Hardware Limitations
		3.5 Attributes
			3.5.1 Availability
			3.5.2 Security Requirements
			3.5.3 Maintainability
		3.6 Other Requirements




2 General Description
2.1 Product Perspective 
This is an independent product that assists hospital staff with storing patient data and retrieving patient data for any analysis by their doctor. The hardware to be used will be standard computers used within a hospital setting. Preferably, the systems should use Windows 10, with a multi core processor that supports multithreading. Moreover, standard IO such as a mouse and keyboard is necessary.


2.2 Product Functions
The functions of this system include those of persistent storage. That is, CRUD. Information is to be served to the four use cases of the system; Doctors, Nurses, Billing, and InfoTaker. Along with this, there will be an authentication mechanism that will login authorized personnel. Moreover, each type of user will have different information displayed to them, depending on their job description. 


2.3 User Characteristics
The user group will be the hospital staff. Each staff member responsible for the care of a patient will have some level of access to the system; using a hierarchical system. From bottom to top  Billing, Check-in, Nurse, Doctor.  More features are available the higher the level of the user is.  The doctor and nurses  will preferably have some medical school background as the system is designed to be used by hospital staff. The billing and check-in person should have knowledge of basic terminology used by hospital professionals.  The age range ties into the educational background of the staff member. 


2.4 General Constraints
Only accessible inside of the hospital. There will be no web interface. Furthermore, as will be outlined more in section 3, we will be constrained by HIPAA guidelines. Most importantly, the system will need to be able to run on a standard hospital computer without the need of any upgrades to hardware.


2.5 Assumptions and Dependencies
It is assumed that there will be training for hospital staff to use the system.  As we will be running our software within the Java Virtual Machine, the computers in the hospital will require Java. Additionally, to avoid any system downtime in the case of a power outage, the computers running the system must be dependent on the backup generator.




3 Specific Requirements
3.1 Functional Requirements
The feature of the system
System to achieve the registration management, prescription management, charge management, drug management, the necessary functions. Its operation is simple, perfect function, stable operation, for small hospital outpatient information management.
The functions need in this system 
Login function
Admin function
Each type of user will have its own class complete with unique functions based on their role in the emergency room. Details on the classes and functions are as follows
InfoTaker
Only basic info
Name
Address
Phone number
Insurance Info
Social security number or ID number
Emergency contact info
Patient physician info
Symptoms
Medications
Allergies
Medical History
Doctors
Access to all info
Permission to add and create records
Enter diagnosis
Chest pain
Echocardiogram
Computerized tomography (CT scan)
Stress tests
Coronary catheterization (angiogram)
Acute upper respiratory infection
Throat swab
Lateral neck X-rays
CT scans
Urinary tract infection
Urine Test
Antibiotic 
Headache
Aspirin
Ibuprofen (Advil, Motrin IB, others)
Acetaminophen (Tylenol, others)
Abdominal pain
Simethicone
antacids 
Syncope and collapse
CT scans
Noninfective gastroenteritis and colitis
Ganciclovir
Valganciclovir
foscarnet
Dizziness and giddiness
Sugar
Blood Test
Lower back pain
Ct Scans
Aspirin
Injury of head
Anti-seizure
Surgery
Rehabilitation
Order tests and procedures
Prescribe medication
Enter discharge instructions
Print function
Nurses
Can see everything
Can update patient info
Print discharge instructions
Billing
Can access to basic info
Add fees to the bills
Print bills
Mark bills paidunpaid

3.2 External Interface Requirements
Logo to start

Click show up log in interface
Name
Passcode
 
Admin Interface 
Have the ability to add four different type users into the system, the left side is the four different type users. The upper right shows the name list of current type  users in the system. The button left gives the button to add or delete users.

To add any type account to the system will show up basic info interface 

For each user will show up the info table and button to Interactive 
Left can be the functions for each user can do, upper right shows the patient information, and the button shows the button to edit the information.

Or another interface(this one made for biller but can apply to others)  
Left shows the patient name list in the system, the left shows the patient information and button shows the button to edit.


3.3 Performance Requirements
Each instance of the Emergency Room Patient Info App will be expected to handle a single user, but up to 10 instances of the app may communicate with the database at a single time. Database calls will take between 0 and 10 seconds to resolve.


3.4 Design Constraints
3.4.1 Standards Compliance
As a medical information application, the primary standard that the Emergency Room Patient Info App will have to conform with is HIPAA. HIPAA regulations require that “reasonable steps” are taken to ensure the confidentiality of PHI.
3.4.2 Hardware Limitations
The Emergency Room Patient Info App needs to be able to run on standard hospital computers. This may include several models of computer but it is expected that all of them run the Windows operating system and have Java installed. 

3.5 Attributes
Any updates to the system will be deployed during any ‘off hours’ of the hospital. Wherein, it is safe to do so without any hindrance of Hospital operations. In regard to fault tolerance, this system would be described as mission critical and will  need to be kept running in the case of new arrivals. We will need to ensure that the system is always available, functional, and accessible. Once we have the system implemented we will push the system past its limits to ensure reliability. For instance, we will have a replica set for the MongoDB instance in case the primary instance of the database were to go down.
To ensure confidentiality and overall security of the system, a hashing algorithm, SHA256, will be used to secure password data of all users. Since it is a one-way function, if the database is breached, the passwords will remain secure. The system will only be accessible within the hospital, where the data is needed. There could potentially be an interface for outside access for patients to check their data, (such as MyChart), but that would be integrated at a later date specified by any further client needs.
The goal will be to have a low level of coupling to allow maintainability of the system. With low coupling, if one function is changed, others will not break. With this approach in mind, we will be able to afford more fault tolerance. If there is an error with one component, then another will continue to run without any dependency on the other.

3.6 Other Requirements
	Our system will rely on a MongoDB server to store the patient information.
